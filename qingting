#!/usr/bin/ruby

require 'oga'
require 'json'
require 'open-uri'
require 'thread'
require 'open3'
require 'os'
require 'openssl'

def fetch_sound_list(url)
	puts 'fetching sound list...'
	albumid = ""

	match = /^https:\/\/www\.qingting\.fm\/channels\/(\d+)(\/)?$/.match(url)
	if match
		albumid = match[1]
	else
		raise "url format is not correct"
	end
	if url[-1] != '/'
		url = url + '/'
	end

	body = open(url).read
	document = Oga.parse_html(body)
	spans = document.xpath('//span[@class="total"]')

	album_count = nil
	spans.each do |span|
		match = /(\d+)/.match(span.text)
		if match
			album_count = match[1]
			break
		end
	end

	if not album_count
		raise "cannot fetch album count"
	end

	page_size = album_count.to_i / 30 + 1
	array = []

	for page in 1..page_size
		body = open(url + page.to_s + '/').read
		document = Oga.parse_html(body)
		as = document.xpath('//a[@class="pTitle"]')
		array += as.each_with_index.map{ |a,i| [a.text.match(/^\d/) ? a.text : sprintf("%02d%s", i + 1 + ( page - 1 ) * 30, a.text), constuct_url(a)] }.map{ |elem| [elem[0].gsub(/[\s\(\)\"\'\\\/-]/, '').gsub(/\.mp3$/, ''), elem[1]] }
	end
	return Hash[array]
end

def constuct_url(a)
	match = /\/channels\/(\d+)\/programs\/(\d+)/.match(a.get('href'))
	if not match
		raise "fetch album id and audio id from " + url + " failed"
	end
	albumid = match[1]
	audioid = match[2]
	t = Time.new
	url = '/audiostream/redirect/' + albumid + '/' + audioid + '?access_token=&device_id=MOBILESITE&qingting_id=&t=' + (t.to_f * 1000).to_i.to_s
	return 'https://audio.qingting.fm' + url + '&sign=' + sign(url)
end

def sign(url)
	return OpenSSL::HMAC.hexdigest("MD5", "fpMn12&38f_2e", url)
end

def convert_m4a_to_mp3(name)
	if not File.exist?(name + '.mp3') and File.exist?(name + '.m4a')
		puts 'converting ' + name + '...'
		stdout, stderr, status = Open3.capture3('ffmpeg -loglevel 16 -i "' + name + '.m4a" -map 0:a -codec:a libmp3lame -q:a 4 -map_metadata -1 "' + name + '.mp3"')
		if status.success?
			puts 'convert ' + name + ' successfully'
		else
			puts 'convert ' + name + ' failed '
			File.delete(name + '.mp3') if File.exist?(name + '.mp3')
		end
	end
end

def fetch_audio_file(url, name)
	return if File.exist?(name + '.m4a') or File.exist?(name + '.mp3') or url == nil
	puts 'downloading ' + name + '...'
	open(name + '.m4a', 'wb') do |file|
		file << open(url).read
	end
	puts 'download ' + name + ' successfully'
end

def fetch_audio(argv)
	if argv.empty?
		puts "usage: ./qingting url [filter]"
		exit 1
	end

	url = argv[0]
	filter = argv[1]

	queue = Queue.new
	hash = fetch_sound_list(url)
	hash = hash.select{ |key, value| key.force_encoding('UTF-8').match(/#{filter}/) } if filter
	puts 'there are ' + hash.keys.length.to_s + ' audio in the list'
	thread_count = [[OS.cpu_count - 1, 1].max, hash.keys.length].min
	thread_pool = (0...thread_count).map do
		Thread.new do
			begin
				while name = queue.pop
					convert_m4a_to_mp3(name)
				end
			end
		end
	end
	begin
		hash.keys.each do |name|
			url = hash[name]
			fetch_audio_file(url, name)
			queue.push name
		end
	rescue Exception => e
		puts "catch one Exception: " + e.message
		puts e.backtrace
	end
	(0...thread_count).map do ||
		queue.push nil
	end
	puts "waiting for the work threads finish"
	thread_pool.map(&:join)
	hash.keys.each { |name| File.delete(name + '.m4a') if File.exist?(name + '.m4a') }
end

fetch_audio(ARGV)
